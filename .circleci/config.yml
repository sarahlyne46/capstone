version: 2.1

#orbs:
#  aws-cli: circleci/aws-cli@2.0.3
#  slack: circleci/slack@4.2.1

parameters:
  DOCKER_PATH:
    type: string
    default: "sarahlyne46/capstone"
  DOCKER_IMAGE_NAME:
    type: string
    default: "capstone"

jobs:
  build:
    docker:
      - image: python:3.7.3-stretch

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install

      - run:
          name: Install hadolint
          command: |
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 && chmod +x /bin/hadolint

      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint   

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}


  upload-docker:
    docker:
      - image: circleci/golang:1.15
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD

    working_directory: ~/repo

    steps:
      - checkout
      
      - setup_remote_docker:
          version: 19.03.13

      - run:
          name: Build docker container
          command: |
            docker build --tag=$DOCKER_IMAGE_NAME .
            docker image ls
      
      - run:
          name: Upload Docker
          command: |
            echo "Docker ID and Image: $DOCKER_IMAGE_NAME"
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker tag $DOCKER_IMAGE_NAME $DOCKER_PATH:$CIRCLE_WORKFLOW_ID
            docker push $DOCKER_PATH:$CIRCLE_WORKFLOW_ID
 

  deploy-infrastructure:

    docker:
      - image: amazon/aws-cli

    steps:
      - checkout

      - run:
          name: Install dependencies
          command: yum install -y tar gzip

      - run:
          name: Create EKS Network
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/eks-network.yml \
              --stack-name "capstone-network" \
              --region us-east-1 \
              --parameter-overrides file://cloudformation/eks-network-param.json \
              --tags project=capstone-project

      - run:
          name: Create EKS Cluster
          no_output_timeout: 30m          
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/eks-cluster.yml \
              --stack-name "capstone-cluster" \
              --region us-east-1 \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" \
              --parameter-overrides file://cloudformation/eks-cluster-param.json \
              --tags project=capstone-project \
              --no-verify-ssl

      - run:
          name: Create Node group
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/nodes.yml \
              --stack-name "capstone-nodegroup" \
              --region us-east-1 \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" \
              --parameter-overrides file://cloudformation/nodes-param.json \
              --tags project=capstone-project \
              --no-verify-ssl
                                                                            
      - run:
          name: Create servers
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/servers.yml \
              --stack-name "capstone-servers" \
              --region us-east-1 \
              --capabilities "CAPABILITY_IAM" "CAPABILITY_NAMED_IAM" \
              --parameter-overrides file://cloudformation/servers-param.json \
              --tags project=capstone-project \
              --no-verify-ssl \
              --output text >> ~/servers.txt
            cat ~/servers.txt

      - run:
          name: Get IP Addresses names
          command: |
            echo [webserver] > ~/inventory.txt
            aws ec2 describe-instances \
              --region us-east-1 \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=capstone-project*" \
              --output text >> ~/inventory.txt
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
            - servers.txt                   


  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    environment:
      ANSIBLE_HOST_KEY_CHECKING: "false"      
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["94:ae:b0:67:09:ca:49:b8:85:00:08:40:4a:1b:dc:af"]      
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: check inventory file
          command: |
            cat ~/inventory.txt
      - run:
          name: configure server
          no_output_timeout: 30m
          command: |
            if grep -q "No changes to deploy" ~/servers.txt
              then
                cat ~/inventory.txt
                echo "Our management instances are already configured."
              else
                cat ~/inventory.txt
                cd ansible
                ansible-playbook -i ~/inventory.txt configure-server.yml
              fi

  configure-cluster:
    docker:
      - image: python:3.7-alpine3.11
    environment:
      ANSIBLE_HOST_KEY_CHECKING: "false"      
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["94:ae:b0:67:09:ca:49:b8:85:00:08:40:4a:1b:dc:af"]      
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip install awscli
      - run:
          name: check inventory file
          command: |
            cat ~/inventory.txt
      - run:
          name: configure server
          no_output_timeout: 30m
          command: |
             cat ~/inventory.txt
             ansible-playbook -i ~/inventory.txt configure-cluster.yml
              
  deploy-blue:
    docker:
      - image: python:3.7-alpine3.11
    
    working_directory: ~/kube
    
    steps:
      - checkout
      # Deploy code
      - run:
          name: Deploy Blue version
          command: |
            kubectl apply -f app-blue.yaml -f app-service-bg.yaml -f ingress.yaml

#
#  configure-kubernetes:
#    docker:
#      - image: xxx
#
#    working_directory: ~/repo
#
#    steps:
#      - checkout
#      # Deploy code
#      - run:
#          name: configure
#
#  deploy-code:
#    docker:
#      - image: xxx
#
#    working_directory: ~/repo
#
#    steps:
#      - checkout
#      # Deploy code
#      - run:
#          name: Deploy new webpage      
#
#
#  test:
#      # Test deployments
#      - run:
#          name: Testing
#
#

workflows:
  default:
    jobs:
       - build 
       - upload-docker:
           requires: [build]       
       - deploy-infrastructure          
       - configure-infrastructure:
           requires: [deploy-infrastructure]         
       - configure-cluster:
           requires: [configure-infrastructure]   
       - deploy-blue:
           requires: [configure-cluster]  
#       - deploy-code
#       - test
